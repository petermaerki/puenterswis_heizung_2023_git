from contextlib import asynccontextmanager
import asyncio
import dataclasses
import enum
from enum import IntEnum
import logging

from fastapi import Depends, FastAPI, Query

from zentral.context_mock import ContextMock, EnumHausState, HausEvent
from zentral import config_bochs


logging.basicConfig()
logging.getLogger().setLevel(logging.INFO)


class Globals:
    def __init__(self):
        self.ctx: ContextMock = None


globals = Globals()


@asynccontextmanager
async def lifespan(app: FastAPI):
    # https://fastapi.tiangolo.com/advanced/events/
    # http://127.0.0.1:8000/predict?x=2
    #  ==> 84
    async with ContextMock(config_bochs.config_bauabschnitt_bochs) as ctx:
        asyncio.create_task(ctx.modbus_communication.task_modbus())

        # Load the ML model
        globals.ctx = ctx
        yield


app = FastAPI(lifespan=lifespan)


@dataclasses.dataclass(frozen=True)
class ScenarioX:
    nummer: config_bochs.config_bauabschnitt_bochs.haus_enum
    name: str
    state: EnumHausState


@dataclasses.dataclass(frozen=True)
class ScenarioY:
    nummer: config_bochs.config_bauabschnitt_bochs.haus_enum
    name: str
    state: EnumHausState


@app.get("/mock/testy")
async def mock_testy(scenario: ScenarioY = Depends()):
    return {"result": repr(scenario)}


@app.get("/mock/haus")
async def mock_hans(
    haus_nummer: int = Query(
        "haus_nummer",
        enum=[
            h.config_haus.nummer for h in config_bochs.config_bauabschnitt_bochs.haeuser
        ],
    ),
    haus_event: EnumHausState = EnumHausState.modbus_is_error,
    activate: bool = True,
    # x: str = Query("country", enum=["eu", "us", "cn", "ru"]),
):
    # https://fastapi.tiangolo.com/tutorial/query-params-str-validations/
    try:
        haus = globals.ctx.config_bauabschnitt.get_haus_by_nummer(nummer=haus_nummer)
        result_text = globals.ctx.signal_haus(
            HausEvent(haus=haus, state=haus_event, activate=activate)
        )
        return {"result": result_text}
    except AttributeError as e:
        return {"error": str(e)}
